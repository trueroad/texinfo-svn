Index: Texinfo/ModulePath.pm.in
===================================================================
--- Texinfo/ModulePath.pm.in	(revision 8003)
+++ Texinfo/ModulePath.pm.in	(working copy)
@@ -73,6 +73,7 @@ sub init (;$$) {
     if ('@USE_EXTERNAL_UNIDECODE@' ne 'yes') {
       unshift @INC, (File::Spec->catdir($lib_dir, 'lib', 'Text-Unidecode', 'lib'));
     }
+    unshift @INC, (File::Spec->catdir($lib_dir, '..', 'parsetexi'));
   }
 
   if (!$libexec_dir) {
Index: Texinfo/Parser.pm
===================================================================
--- Texinfo/Parser.pm	(revision 8029)
+++ Texinfo/Parser.pm	(working copy)
@@ -27,6 +27,11 @@
 #  user visible subroutines.
 #  internal subroutines, doing the parsing.
 
+
+use Parsetexi;
+1;
+__END__
+
 package Texinfo::Parser;
 
 # We need the unicode stuff.
Index: Texinfo/Report.pm
===================================================================
--- Texinfo/Report.pm	(revision 8036)
+++ Texinfo/Report.pm	(working copy)
@@ -49,7 +49,8 @@ use File::Basename;
 
 use Locale::Messages;
 # to be able to load a parser if none was given to gdt.
-use Texinfo::Parser;
+#use Texinfo::Parser;
+use Parsetexi;
 
 # return the errors and warnings
 sub errors($)
@@ -371,7 +372,8 @@ sub gdt($$;$$)
   }
   $parser_conf->{'in_gdt'} = 1;
   #my $parser = Texinfo::Parser::parser($parser_conf);
-  my $parser = Texinfo::Parser::simple_parser($parser_conf);
+  #my $parser = Texinfo::Parser::simple_parser($parser_conf);
+  my $parser = Parsetexi::parser($parser_conf);
   if ($parser->{'DEBUG'}) {
     print STDERR "GDT $translation_result\n";
   }
Index: Texinfo/Structuring.pm
===================================================================
--- Texinfo/Structuring.pm	(revision 8003)
+++ Texinfo/Structuring.pm	(working copy)
@@ -422,7 +422,8 @@ sub nodes_tree($)
   foreach my $node (@{$self->{'nodes'}}) {
     if ($node->{'extra'}->{'normalized'} eq 'Top') {
       $top_node = $node;
-      my $parser = Texinfo::Parser::simple_parser ($self->{'conf'});
+      #my $parser = Texinfo::Parser::simple_parser ($self->{'conf'});
+      my $parser = Parsetexi::parser ($self->{'conf'});
       my $top_node_up_content_tree
                          = $parser->parse_texi_line($self->{'TOP_NODE_UP'});
       $top_node_up
Index: t/test_utils.pl
===================================================================
--- t/test_utils.pl	(revision 8003)
+++ t/test_utils.pl	(working copy)
@@ -32,7 +32,8 @@ Texinfo::ModulePath::init(undef, undef, 'updirs' =
 
 use Test::More;
 
-use Texinfo::Parser;
+#use Texinfo::Parser;
+use Parsetexi;
 use Texinfo::Convert::Text;
 use Texinfo::Convert::Texinfo;
 use Texinfo::Structuring;
@@ -696,7 +697,8 @@ sub test($$)
   #  push @tested_formats, @{$self->{'test_formats'}};
   }
 
-  my $parser = Texinfo::Parser->parser({'TEST' => 1,
+  #my $parser = Texinfo::Parser->parser({'TEST' => 1,
+  my $parser = Parsetexi::parser({'TEST' => 1,
                                         'include_directories' => [
                                           't/include_dir/',
                                           't/include/',
Index: texi2any.pl
===================================================================
--- texi2any.pl	(revision 8003)
+++ texi2any.pl	(working copy)
@@ -273,8 +273,8 @@ if ($configured_version eq '@' . 'PACKAGE_VERSION@
   } else {
     # used in the standalone perl module, as $hardcoded_version is undef
     # and it should never be configured in that setup
-    require Texinfo::Parser;
-    $configured_version = $Texinfo::Parser::VERSION;
+    ## require Texinfo::Parser;
+    ## $configured_version = $Texinfo::Parser::VERSION;
   }
 }
 
@@ -1078,7 +1078,12 @@ if ($call_texi2dvi) {
   document_warn(__('--Xopt option without printed output')); 
 }
 
-require Texinfo::Parser;
+#require Texinfo::Parser;
+BEGIN {
+require Parsetexi;
+*Texinfo::Parser:: = \%Parsetexi::;
+}
+
 require Texinfo::Structuring;
 require Texinfo::Transformations;
 # Avoid loading these modules until down here to speed up the case
